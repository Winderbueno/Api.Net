// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Db;

#nullable disable

namespace Persistence.Migrations.UserDb
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20230818140019_UserDb-Init")]
    partial class UserDbInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("Domain.Entities.Feature", b =>
                {
                    b.Property<int>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Beta")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("FeatureId");

                    b.ToTable("Features");

                    b.HasData(
                        new
                        {
                            FeatureId = 1,
                            Beta = false,
                            CreatedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5224),
                            CreatedBy = "DbInit",
                            ModifiedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5226),
                            ModifiedBy = "DbInit",
                            Name = "client"
                        },
                        new
                        {
                            FeatureId = 2,
                            Beta = false,
                            CreatedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5227),
                            CreatedBy = "DbInit",
                            ModifiedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5228),
                            ModifiedBy = "DbInit",
                            Name = "user"
                        },
                        new
                        {
                            FeatureId = 3,
                            Beta = false,
                            CreatedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5230),
                            CreatedBy = "DbInit",
                            ModifiedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5231),
                            ModifiedBy = "DbInit",
                            Name = "task"
                        },
                        new
                        {
                            FeatureId = 4,
                            Beta = false,
                            CreatedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5232),
                            CreatedBy = "DbInit",
                            ModifiedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5233),
                            ModifiedBy = "DbInit",
                            Name = "contract"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            PermissionId = 1,
                            CreatedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5269),
                            CreatedBy = "DbInit",
                            ModifiedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5271),
                            ModifiedBy = "DbInit",
                            Name = "client.read"
                        },
                        new
                        {
                            PermissionId = 2,
                            CreatedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5272),
                            CreatedBy = "DbInit",
                            ModifiedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5273),
                            ModifiedBy = "DbInit",
                            Name = "client.create"
                        },
                        new
                        {
                            PermissionId = 3,
                            CreatedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5274),
                            CreatedBy = "DbInit",
                            ModifiedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5276),
                            ModifiedBy = "DbInit",
                            Name = "client.update"
                        },
                        new
                        {
                            PermissionId = 4,
                            CreatedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5277),
                            CreatedBy = "DbInit",
                            ModifiedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5278),
                            ModifiedBy = "DbInit",
                            Name = "user.read"
                        },
                        new
                        {
                            PermissionId = 5,
                            CreatedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5279),
                            CreatedBy = "DbInit",
                            ModifiedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5280),
                            ModifiedBy = "DbInit",
                            Name = "user.impersonate"
                        },
                        new
                        {
                            PermissionId = 6,
                            CreatedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5281),
                            CreatedBy = "DbInit",
                            ModifiedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5283),
                            ModifiedBy = "DbInit",
                            Name = "user.create"
                        },
                        new
                        {
                            PermissionId = 7,
                            CreatedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5284),
                            CreatedBy = "DbInit",
                            ModifiedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5285),
                            ModifiedBy = "DbInit",
                            Name = "user.update"
                        },
                        new
                        {
                            PermissionId = 8,
                            CreatedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5286),
                            CreatedBy = "DbInit",
                            ModifiedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5287),
                            ModifiedBy = "DbInit",
                            Name = "user.suspend"
                        },
                        new
                        {
                            PermissionId = 9,
                            CreatedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5288),
                            CreatedBy = "DbInit",
                            ModifiedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5290),
                            ModifiedBy = "DbInit",
                            Name = "user.deactivate"
                        },
                        new
                        {
                            PermissionId = 10,
                            CreatedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5291),
                            CreatedBy = "DbInit",
                            ModifiedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5292),
                            ModifiedBy = "DbInit",
                            Name = "task.read"
                        },
                        new
                        {
                            PermissionId = 11,
                            CreatedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5293),
                            CreatedBy = "DbInit",
                            ModifiedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5294),
                            ModifiedBy = "DbInit",
                            Name = "task.create"
                        },
                        new
                        {
                            PermissionId = 12,
                            CreatedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5296),
                            CreatedBy = "DbInit",
                            ModifiedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5297),
                            ModifiedBy = "DbInit",
                            Name = "task.update"
                        },
                        new
                        {
                            PermissionId = 13,
                            CreatedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5298),
                            CreatedBy = "DbInit",
                            ModifiedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5299),
                            ModifiedBy = "DbInit",
                            Name = "contract.read"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Function")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserType")
                        .HasColumnType("INTEGER");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CreatedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5108),
                            CreatedBy = "DbInit",
                            Function = 2,
                            ModifiedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5157),
                            ModifiedBy = "DbInit",
                            Name = "Entreprise | Support",
                            UserType = 0
                        },
                        new
                        {
                            RoleId = 2,
                            CreatedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5159),
                            CreatedBy = "DbInit",
                            Function = 2,
                            ModifiedAt = new DateTime(2023, 8, 18, 16, 0, 19, 393, DateTimeKind.Local).AddTicks(5160),
                            ModifiedBy = "DbInit",
                            Name = "Entreprise | Distributeur",
                            UserType = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserK", b =>
                {
                    b.Property<int>("UserKId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IdentityId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserKId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FeaturePermission", b =>
                {
                    b.Property<int>("FeaturesFeatureId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PermissionsPermissionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FeaturesFeatureId", "PermissionsPermissionId");

                    b.HasIndex("PermissionsPermissionId");

                    b.ToTable("FeaturePermission");

                    b.HasData(
                        new
                        {
                            FeaturesFeatureId = 1,
                            PermissionsPermissionId = 1
                        },
                        new
                        {
                            FeaturesFeatureId = 1,
                            PermissionsPermissionId = 2
                        },
                        new
                        {
                            FeaturesFeatureId = 1,
                            PermissionsPermissionId = 3
                        },
                        new
                        {
                            FeaturesFeatureId = 2,
                            PermissionsPermissionId = 4
                        },
                        new
                        {
                            FeaturesFeatureId = 2,
                            PermissionsPermissionId = 5
                        },
                        new
                        {
                            FeaturesFeatureId = 2,
                            PermissionsPermissionId = 6
                        },
                        new
                        {
                            FeaturesFeatureId = 2,
                            PermissionsPermissionId = 7
                        },
                        new
                        {
                            FeaturesFeatureId = 2,
                            PermissionsPermissionId = 8
                        },
                        new
                        {
                            FeaturesFeatureId = 2,
                            PermissionsPermissionId = 9
                        },
                        new
                        {
                            FeaturesFeatureId = 3,
                            PermissionsPermissionId = 10
                        },
                        new
                        {
                            FeaturesFeatureId = 3,
                            PermissionsPermissionId = 11
                        },
                        new
                        {
                            FeaturesFeatureId = 3,
                            PermissionsPermissionId = 12
                        },
                        new
                        {
                            FeaturesFeatureId = 4,
                            PermissionsPermissionId = 13
                        });
                });

            modelBuilder.Entity("FeatureRole", b =>
                {
                    b.Property<int>("FeaturesFeatureId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RolesRoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FeaturesFeatureId", "RolesRoleId");

                    b.HasIndex("RolesRoleId");

                    b.ToTable("FeatureRole");

                    b.HasData(
                        new
                        {
                            FeaturesFeatureId = 1,
                            RolesRoleId = 1
                        },
                        new
                        {
                            FeaturesFeatureId = 2,
                            RolesRoleId = 1
                        },
                        new
                        {
                            FeaturesFeatureId = 3,
                            RolesRoleId = 1
                        },
                        new
                        {
                            FeaturesFeatureId = 4,
                            RolesRoleId = 1
                        },
                        new
                        {
                            FeaturesFeatureId = 1,
                            RolesRoleId = 2
                        },
                        new
                        {
                            FeaturesFeatureId = 3,
                            RolesRoleId = 2
                        },
                        new
                        {
                            FeaturesFeatureId = 4,
                            RolesRoleId = 2
                        });
                });

            modelBuilder.Entity("FeatureUserK", b =>
                {
                    b.Property<int>("BetaFeaturesFeatureId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsersUserKId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BetaFeaturesFeatureId", "UsersUserKId");

                    b.HasIndex("UsersUserKId");

                    b.ToTable("BetaFeatureUserK", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserK", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FeaturePermission", b =>
                {
                    b.HasOne("Domain.Entities.Feature", null)
                        .WithMany()
                        .HasForeignKey("FeaturesFeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FeatureRole", b =>
                {
                    b.HasOne("Domain.Entities.Feature", null)
                        .WithMany()
                        .HasForeignKey("FeaturesFeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FeatureUserK", b =>
                {
                    b.HasOne("Domain.Entities.Feature", null)
                        .WithMany()
                        .HasForeignKey("BetaFeaturesFeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserK", null)
                        .WithMany()
                        .HasForeignKey("UsersUserKId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
